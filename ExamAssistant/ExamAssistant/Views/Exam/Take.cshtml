@using ExamAssistant.Models
@*@model ExamAssistant.Models.Exam*@

<form class="form-horizontal container">
    @foreach (Section examSection in Model.Sections)
    {
        <fieldset class="exam-section">
            <legend>@examSection.Title</legend>
            <p class="instruction"><strong>Directions: </strong>@examSection.Instructions</p>
            @DisplayItems(examSection)
        </fieldset>
    }
</form>


@helper DisplayItems(Section examSection)
{
    <ol class="section-items">
        @foreach (Item item in examSection.Items)
        {
            int sectionIndex = Model.Sections.IndexOf(examSection);
            @FormatItem(sectionIndex, item)
        }
    </ol>
}
@helper FormatItem(int sectionIndex, Item item)
{
    switch (item.Type)
    {
        case QuestionType.Enumeration:
            @EnumerationItem(item);
            break;
        case QuestionType.Selection:
            int itemIndex = Model.Sections[sectionIndex].Items.IndexOf(item);
            @SelectionItem(sectionIndex + "-" + itemIndex, item);
            break;
        case QuestionType.MultipleChoice:
            int itemIndexRadio = Model.Sections[sectionIndex].Items.IndexOf(item);
            @MultipleChoiceItem(sectionIndex + "-" + itemIndexRadio, item);
            break;
        case QuestionType.DragDrop:
            @DragDropItem(item);
            break;
    }
}

@helper EnumerationItem(Item item)
{
    <li>
        <p>@item.Question</p>
        <textarea class="form-control" rows="2"></textarea>
        <span class="help-block">
            Separate answers by a comma (e.g. a,b,c)
        </span>
        @ReviewButton("Review later")

    </li>
}
@helper SelectionItem(string checkboxId, Item item)
{
    <li>
        <p>@item.Question</p>
        @foreach (string choice in item.Choices)
        {
            @Html.CheckBox("choices" + checkboxId) @choice <br />
        }
        @ReviewButton("Review later")
    </li>
}
@helper MultipleChoiceItem(string radioId, Item item)
{
    <li>
        <p>@item.Question</p>
        <ol type="a" class="multiple-choice-option">
            @{
                List<string> choices = item.Choices;
            }
            @foreach (string choice in choices)
            {
                int i = choices.IndexOf(choice);
                <li>
                    @Html.RadioButton("radio" + radioId, i)
                    @choice <br />
                </li>
            }
        </ol>
        @ReviewButton("Review later")
    </li>
}
@helper DragDropItem(Item item)
{
    <li>
        <p>@item.Question</p>
        <div class="col-md-5 drag-drop-container">
            <p class="help-block text-center">Choices</p>
            <div id="drop-source"
                 ondrop="drop(event)"
                 ondragover="allowDrop(event)">
                @foreach (string choice in item.Choices)
                {
                    <div id="@choice" class="drag-drop-option" draggable="true"
                         ondragstart="drag(event)">
                        @choice
                    </div>
                }
            </div>
        </div>
        <div class="col-md-5 drag-drop-container-target">
            <p class="help-block text-center">Drag answer here</p>
            <div id="drop-target"
                 ondragover="allowDrop(event)"
                 ondrop="drop(event)">

            </div>
        </div>
        <div class="row col-md-12">
            @ReviewButton("Review later")
        </div>

    </li>
}

@helper ReviewButton(string message)
{
    <button class=" btn btn-warning btn-xs review-btn">
        <span class="glyphicon glyphicon-star"></span>
        @message
    </button>
}

@section scripts
{
    <script type="text/javascript">
        function allowDrop(e) {
            e.preventDefault();
        }

        function drag(e) {
            e.dataTransfer.setData("answer", e.target.id);
        }

        function drop(ev) {
            ev.preventDefault();
            var data = ev.dataTransfer.getData("answer");
            if (ev.target.nodeName === "DIV" && (ev.target.id === "drop-target" || ev.target.id === "drop-source")) {
                ev.target.appendChild(document.getElementById(data));
            }
            
        }
    </script>
    
}
